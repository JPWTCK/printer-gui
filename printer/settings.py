"""
Django settings for printer project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from django.contrib.messages import constants as messages_constants
from django.core.management.utils import get_random_secret_key

import contextlib
import ipaddress
import os
import socket

MESSAGE_TAGS = {
    messages_constants.DEBUG: 'alert-secondary',
    messages_constants.INFO: 'alert-info',
    messages_constants.SUCCESS: 'alert-success',
    messages_constants.WARNING: 'alert-warning',
    messages_constants.ERROR: 'alert-danger',
 }

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


def _extract_bind_host(bind_address: str) -> str:
    value = (bind_address or "").strip()
    if not value:
        return ""

    if value.startswith("["):
        closing = value.find("]")
        if closing != -1:
            return value[1:closing]
        return value[1:]

    try:
        ipaddress.ip_address(value)
        return value
    except ValueError:
        host_part, sep, port = value.rpartition(":")
        if sep and port.isdigit():
            return host_part
    return value


def _is_unspecified_address(host: str) -> bool:
    try:
        return ipaddress.ip_address(host).is_unspecified
    except ValueError:
        return False


ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

bind_host = _extract_bind_host(os.environ.get("PRINTER_GUI_BIND_ADDRESS", "0.0.0.0:8000"))
if bind_host and not _is_unspecified_address(bind_host) and bind_host not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(bind_host)

extra_hosts = os.environ.get("PRINTER_GUI_ALLOWED_HOSTS", "")
if extra_hosts:
    for host in (item.strip() for item in extra_hosts.split(",")):
        if host and host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(host)


def _add_candidate_host(host: str, *, seen: set[str], target: list[str]) -> None:
    value = (host or "").strip()
    if not value or value in seen:
        return
    seen.add(value)
    target.append(value)


def _discover_local_addresses() -> list[str]:
    discovered: list[str] = []
    seen: set[str] = set(ALLOWED_HOSTS)

    hostname_candidates = []
    with contextlib.suppress(OSError):
        hostname_candidates.append(socket.gethostname())
    with contextlib.suppress(OSError):
        hostname_candidates.append(socket.getfqdn())

    for candidate in hostname_candidates:
        _add_candidate_host(candidate, seen=seen, target=discovered)
        candidate = (candidate or "").strip()
        if candidate and "." not in candidate:
            _add_candidate_host(f"{candidate}.local", seen=seen, target=discovered)

    # Resolve hostname candidates to IP addresses
    for candidate in list(discovered):
        with contextlib.suppress(socket.gaierror):
            for info in socket.getaddrinfo(candidate, None):
                address = info[4][0]
                if _is_unspecified_address(address):
                    continue
                with contextlib.suppress(ValueError):
                    ipaddress.ip_address(address)
                    _add_candidate_host(address, seen=seen, target=discovered)

    # Attempt to determine the outbound addresses for IPv4 and IPv6
    outbound_targets = (
        (socket.AF_INET, ("8.8.8.8", 80)),
        (socket.AF_INET6, ("2001:4860:4860::8888", 80)),
    )

    for family, destination in outbound_targets:
        try:
            sock = socket.socket(family, socket.SOCK_DGRAM)
        except OSError:
            continue
        with sock:
            try:
                sock.connect(destination)
            except OSError:
                continue
            address = sock.getsockname()[0]
        if _is_unspecified_address(address):
            continue
        with contextlib.suppress(ValueError):
            ipaddress.ip_address(address)
            _add_candidate_host(address, seen=seen, target=discovered)

    return discovered


ALLOWED_HOSTS.extend(_discover_local_addresses())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    ## 3rd party ##
    'crispy_forms',
    'crispy_bootstrap5',

    ## Programmer-defined ##
    'printer.apps.PrinterConfig',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = ("bootstrap5",)
CRISPY_TEMPLATE_PACK = 'bootstrap5'  # For Crispy Forms

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'printer.urls'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'printer.context.add_to_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'printer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

# Localized formatting relies on LANGUAGE_CODE and USE_I18N
USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
